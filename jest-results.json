{"numFailedTestSuites":2,"numFailedTests":5,"numPassedTestSuites":0,"numPassedTests":19,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":2,"numTotalTests":24,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1753422884014,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["get_available_bikes.controller","healthCheck"],"duration":7,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"get_available_bikes.controller healthCheck should return a 200 status with success message","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"startAt":1753422884739,"status":"passed","title":"should return a 200 status with success message"},{"ancestorTitles":["get_available_bikes.controller","isUserInServiceArea"],"duration":0,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"get_available_bikes.controller isUserInServiceArea should return allow_ride true when user is in service area","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"startAt":1753422884747,"status":"passed","title":"should return allow_ride true when user is in service area"},{"ancestorTitles":["get_available_bikes.controller","isUserInServiceArea"],"duration":0,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"get_available_bikes.controller isUserInServiceArea should return allow_ride false when user is not in service area","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"startAt":1753422884748,"status":"passed","title":"should return allow_ride false when user is not in service area"},{"ancestorTitles":["get_available_bikes.controller","isUserInServiceArea"],"duration":12,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"get_available_bikes.controller isUserInServiceArea should handle database errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"startAt":1753422884748,"status":"passed","title":"should handle database errors gracefully"},{"ancestorTitles":["get_available_bikes.controller","fetchAvailableBikes"],"duration":1,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"get_available_bikes.controller fetchAvailableBikes should return available bikes in the service area","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"startAt":1753422884760,"status":"passed","title":"should return available bikes in the service area"},{"ancestorTitles":["get_available_bikes.controller","fetchAvailableBikes"],"duration":1,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"get_available_bikes.controller fetchAvailableBikes should throw error when database query fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"startAt":1753422884761,"status":"passed","title":"should throw error when database query fails"},{"ancestorTitles":["get_available_bikes.controller","makeEntryInHistory"],"duration":1,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"get_available_bikes.controller makeEntryInHistory should successfully log bike availability history","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"startAt":1753422884762,"status":"passed","title":"should successfully log bike availability history"},{"ancestorTitles":["get_available_bikes.controller","makeEntryInHistory"],"duration":1,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"get_available_bikes.controller makeEntryInHistory should return false when logging fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"startAt":1753422884763,"status":"passed","title":"should return false when logging fails"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":1,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"get_available_bikes.controller get_available_bikes should return 400 when required parameters are missing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"startAt":1753422884764,"status":"passed","title":"should return 400 when required parameters are missing"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":1,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"get_available_bikes.controller get_available_bikes should return 401 when user is not found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"startAt":1753422884765,"status":"passed","title":"should return 401 when user is not found"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":1,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"get_available_bikes.controller get_available_bikes should return appropriate message when user is blocked","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"startAt":1753422884766,"status":"passed","title":"should return appropriate message when user is blocked"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":0,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"get_available_bikes.controller get_available_bikes should return appropriate message when user balance is low","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"startAt":1753422884767,"status":"passed","title":"should return appropriate message when user balance is low"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":1,"failing":false,"failureDetails":[{}],"failureMessages":["Error: Property `isUserInServiceArea` does not exist in the provided object\n    at ModuleMocker.spyOn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-mock/build/index.js:593:13)\n    at Object.spyOn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/controllers/get_available_bikes.controller.test.js:205:12)\n    at Promise.finally.completed (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)\n    at _callCircusTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)\n    at _runTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:949:3)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:839:13)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:829:11)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:829:11)\n    at run (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:757:3)\n    at runAndTransformResultsToJestFormat (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)\n    at jestAdapter (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/runner.js:101:19)\n    at runTestInternal (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-runner/build/index.js:272:16)\n    at runTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-runner/build/index.js:340:7)"],"fullName":"get_available_bikes.controller get_available_bikes should return appropriate message when user is not in service area","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1753422884767,"status":"failed","title":"should return appropriate message when user is not in service area"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":1,"failing":false,"failureDetails":[{}],"failureMessages":["Error: Property `isUserInServiceArea` does not exist in the provided object\n    at ModuleMocker.spyOn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-mock/build/index.js:593:13)\n    at Object.spyOn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/controllers/get_available_bikes.controller.test.js:225:12)\n    at Promise.finally.completed (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)\n    at _callCircusTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)\n    at _runTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:949:3)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:839:13)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:829:11)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:829:11)\n    at run (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:757:3)\n    at runAndTransformResultsToJestFormat (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)\n    at jestAdapter (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/runner.js:101:19)\n    at runTestInternal (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-runner/build/index.js:272:16)\n    at runTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-runner/build/index.js:340:7)"],"fullName":"get_available_bikes.controller get_available_bikes should return appropriate message when no bikes are available","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1753422884768,"status":"failed","title":"should return appropriate message when no bikes are available"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":0,"failing":false,"failureDetails":[{}],"failureMessages":["Error: Property `isUserInServiceArea` does not exist in the provided object\n    at ModuleMocker.spyOn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-mock/build/index.js:593:13)\n    at Object.spyOn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/controllers/get_available_bikes.controller.test.js:260:12)\n    at Promise.finally.completed (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)\n    at _callCircusTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)\n    at _runTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:949:3)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:839:13)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:829:11)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:829:11)\n    at run (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:757:3)\n    at runAndTransformResultsToJestFormat (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)\n    at jestAdapter (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/runner.js:101:19)\n    at runTestInternal (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-runner/build/index.js:272:16)\n    at runTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-runner/build/index.js:340:7)"],"fullName":"get_available_bikes.controller get_available_bikes should return available bikes when all conditions are met","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1753422884769,"status":"failed","title":"should return available bikes when all conditions are met"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":2,"failing":false,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n\nNumber of calls: \u001b[31m1\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.toHaveBeenCalledWith (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/controllers/get_available_bikes.controller.test.js:279:26)"],"fullName":"get_available_bikes.controller get_available_bikes should handle errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1753422884770,"status":"failed","title":"should handle errors gracefully"}],"endTime":1753422884801,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mget_available_bikes.controller › get_available_bikes › should return appropriate message when user is not in service area\u001b[39m\u001b[22m\n\n    Property `isUserInServiceArea` does not exist in the provided object\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 203 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 204 |\u001b[39m       \u001b[90m// Mock isUserInServiceArea to return not in service area\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 205 |\u001b[39m       jest\u001b[33m.\u001b[39mspyOn(global\u001b[33m,\u001b[39m \u001b[32m'isUserInServiceArea'\u001b[39m)\u001b[33m.\u001b[39mmockImplementationOnce(() \u001b[33m=>\u001b[39m ({\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 206 |\u001b[39m         allow_ride\u001b[33m:\u001b[39m \u001b[36mfalse\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 207 |\u001b[39m         service_area_name\u001b[33m:\u001b[39m \u001b[32m''\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 208 |\u001b[39m         message\u001b[33m:\u001b[39m \u001b[32m'We are not serviceable in your area'\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ModuleMocker.spyOn (\u001b[22m\u001b[2mnode_modules/jest-mock/build/index.js\u001b[2m:593:13)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.spyOn (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/controllers/get_available_bikes.controller.test.js\u001b[39m\u001b[0m\u001b[2m:205:12)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mget_available_bikes.controller › get_available_bikes › should return appropriate message when no bikes are available\u001b[39m\u001b[22m\n\n    Property `isUserInServiceArea` does not exist in the provided object\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 223 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 224 |\u001b[39m       \u001b[90m// Mock isUserInServiceArea to return in service area\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 225 |\u001b[39m       jest\u001b[33m.\u001b[39mspyOn(global\u001b[33m,\u001b[39m \u001b[32m'isUserInServiceArea'\u001b[39m)\u001b[33m.\u001b[39mmockImplementationOnce(() \u001b[33m=>\u001b[39m ({\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 226 |\u001b[39m         allow_ride\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 227 |\u001b[39m         service_area_name\u001b[33m:\u001b[39m \u001b[32m'Test Area'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 228 |\u001b[39m         city_id\u001b[33m:\u001b[39m \u001b[35m1\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ModuleMocker.spyOn (\u001b[22m\u001b[2mnode_modules/jest-mock/build/index.js\u001b[2m:593:13)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.spyOn (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/controllers/get_available_bikes.controller.test.js\u001b[39m\u001b[0m\u001b[2m:225:12)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mget_available_bikes.controller › get_available_bikes › should return available bikes when all conditions are met\u001b[39m\u001b[22m\n\n    Property `isUserInServiceArea` does not exist in the provided object\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 258 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 259 |\u001b[39m       \u001b[90m// Mock helper functions\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 260 |\u001b[39m       jest\u001b[33m.\u001b[39mspyOn(global\u001b[33m,\u001b[39m \u001b[32m'isUserInServiceArea'\u001b[39m)\u001b[33m.\u001b[39mmockImplementationOnce(() \u001b[33m=>\u001b[39m mockServiceArea)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 261 |\u001b[39m       jest\u001b[33m.\u001b[39mspyOn(global\u001b[33m,\u001b[39m \u001b[32m'fetchAvailableBikes'\u001b[39m)\u001b[33m.\u001b[39mmockImplementationOnce(() \u001b[33m=>\u001b[39m mockBikes)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 262 |\u001b[39m       jest\u001b[33m.\u001b[39mspyOn(global\u001b[33m,\u001b[39m \u001b[32m'makeEntryInHistory'\u001b[39m)\u001b[33m.\u001b[39mmockImplementationOnce(() \u001b[33m=>\u001b[39m \u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 263 |\u001b[39m       \u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ModuleMocker.spyOn (\u001b[22m\u001b[2mnode_modules/jest-mock/build/index.js\u001b[2m:593:13)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.spyOn (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/controllers/get_available_bikes.controller.test.js\u001b[39m\u001b[0m\u001b[2m:260:12)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mget_available_bikes.controller › get_available_bikes › should handle errors gracefully\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 277 |\u001b[39m       \u001b[36mawait\u001b[39m get_available_bikes(req\u001b[33m,\u001b[39m res)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 278 |\u001b[39m       \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 279 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 280 |\u001b[39m       expect(res\u001b[33m.\u001b[39mjson)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({ \u001b[22m\n\u001b[2m     \u001b[90m 281 |\u001b[39m         error\u001b[33m:\u001b[39m \u001b[32m'Error in get_available_bikes controller'\u001b[39m\u001b[33m,\u001b[39m \u001b[22m\n\u001b[2m     \u001b[90m 282 |\u001b[39m         message\u001b[33m:\u001b[39m \u001b[32m'Database error'\u001b[39m \u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveBeenCalledWith (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/controllers/get_available_bikes.controller.test.js\u001b[39m\u001b[0m\u001b[2m:279:26)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/controllers/get_available_bikes.controller.test.js","startTime":1753422884067,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Get Available Bikes API Integration Tests","GET /api/bikes/health"],"duration":21,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests GET /api/bikes/health should return 200 and success message","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"startAt":1753422885191,"status":"passed","title":"should return 200 and success message"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":13,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should return 400 when required parameters are missing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"startAt":1753422885213,"status":"passed","title":"should return 400 when required parameters are missing"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":38,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should return 401 when user is not found","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"startAt":1753422885226,"status":"passed","title":"should return 401 when user is not found"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":5,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should return appropriate message for blocked user","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"startAt":1753422885264,"status":"passed","title":"should return appropriate message for blocked user"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":4,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should return appropriate message for user with low balance","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"startAt":1753422885269,"status":"passed","title":"should return appropriate message for user with low balance"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":18,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should return appropriate message for user outside service area","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"startAt":1753422885273,"status":"passed","title":"should return appropriate message for user outside service area"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":14,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should return bikes when all conditions are met","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"startAt":1753422885291,"status":"passed","title":"should return bikes when all conditions are met"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":10,"failing":false,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m, \u001b[22m\u001b[32mvalue\u001b[39m\u001b[2m)\u001b[22m\n\nExpected path: \u001b[32m\"latitude\"\u001b[39m\n\nExpected value: \u001b[32m12.9716\u001b[39m\nReceived value: \u001b[31m\"12.97160000\"\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m, \u001b[22m\u001b[32mvalue\u001b[39m\u001b[2m)\u001b[22m\n\nExpected path: \u001b[32m\"latitude\"\u001b[39m\n\nExpected value: \u001b[32m12.9716\u001b[39m\nReceived value: \u001b[31m\"12.97160000\"\u001b[39m\n    at Object.toHaveProperty (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/integration/get_available_bikes.integration.test.js:150:32)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should create history entry when bikes are found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"startAt":1753422885306,"status":"failed","title":"should create history entry when bikes are found"}],"endTime":1753422885343,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mGet Available Bikes API Integration Tests › POST /api/bikes/get_available_bikes › should create history entry when bikes are found\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m, \u001b[22m\u001b[32mvalue\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected path: \u001b[32m\"latitude\"\u001b[39m\n\n    Expected value: \u001b[32m12.9716\u001b[39m\n    Received value: \u001b[31m\"12.97160000\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 148 |\u001b[39m           \u001b[36mconst\u001b[39m historyEntry \u001b[33m=\u001b[39m historyRows[\u001b[35m0\u001b[39m]\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 149 |\u001b[39m           expect(historyEntry)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'id'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 150 |\u001b[39m           expect(historyEntry)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'latitude'\u001b[39m\u001b[33m,\u001b[39m validUser\u001b[33m.\u001b[39mlat)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 151 |\u001b[39m           expect(historyEntry)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'longitude'\u001b[39m\u001b[33m,\u001b[39m validUser\u001b[33m.\u001b[39mlong)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 152 |\u001b[39m           expect(historyEntry)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'response'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 153 |\u001b[39m         }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveProperty (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/get_available_bikes.integration.test.js\u001b[39m\u001b[0m\u001b[2m:150:32)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/integration/get_available_bikes.integration.test.js","startTime":1753422884837,"status":"failed","summary":""}],"wasInterrupted":false,"coverageMap":{"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/controllers/get_available_bikes.controller.js":{"path":"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/controllers/get_available_bikes.controller.js","statementMap":{"0":{"start":{"line":6,"column":4},"end":{"line":35,"column":5}},"1":{"start":{"line":7,"column":18},"end":{"line":7,"column":48}},"2":{"start":{"line":10,"column":4},"end":{"line":17,"column":16}},"3":{"start":{"line":19,"column":4},"end":{"line":31,"column":5}},"4":{"start":{"line":20,"column":6},"end":{"line":24,"column":8}},"5":{"start":{"line":26,"column":6},"end":{"line":30,"column":8}},"6":{"start":{"line":33,"column":4},"end":{"line":33,"column":58}},"7":{"start":{"line":34,"column":4},"end":{"line":34,"column":111}},"8":{"start":{"line":38,"column":4},"end":{"line":57,"column":5}},"9":{"start":{"line":39,"column":24},"end":{"line":52,"column":9}},"10":{"start":{"line":53,"column":8},"end":{"line":53,"column":21}},"11":{"start":{"line":55,"column":8},"end":{"line":55,"column":64}},"12":{"start":{"line":56,"column":8},"end":{"line":56,"column":20}},"13":{"start":{"line":61,"column":4},"end":{"line":73,"column":5}},"14":{"start":{"line":62,"column":8},"end":{"line":68,"column":10}},"15":{"start":{"line":69,"column":8},"end":{"line":69,"column":20}},"16":{"start":{"line":71,"column":8},"end":{"line":71,"column":65}},"17":{"start":{"line":72,"column":8},"end":{"line":72,"column":21}},"18":{"start":{"line":76,"column":28},"end":{"line":121,"column":1}},"19":{"start":{"line":77,"column":4},"end":{"line":120,"column":5}},"20":{"start":{"line":78,"column":35},"end":{"line":78,"column":43}},"21":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"22":{"start":{"line":81,"column":12},"end":{"line":81,"column":83}},"23":{"start":{"line":84,"column":22},"end":{"line":84,"column":80}},"24":{"start":{"line":85,"column":8},"end":{"line":85,"column":52}},"25":{"start":{"line":86,"column":12},"end":{"line":88,"column":13}},"26":{"start":{"line":87,"column":16},"end":{"line":87,"column":125}},"27":{"start":{"line":89,"column":21},"end":{"line":89,"column":28}},"28":{"start":{"line":90,"column":23},"end":{"line":90,"column":30}},"29":{"start":{"line":91,"column":26},"end":{"line":91,"column":40}},"30":{"start":{"line":92,"column":24},"end":{"line":92,"column":36}},"31":{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},"32":{"start":{"line":95,"column":12},"end":{"line":95,"column":137}},"33":{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},"34":{"start":{"line":98,"column":12},"end":{"line":98,"column":130}},"35":{"start":{"line":101,"column":34},"end":{"line":101,"column":70}},"36":{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},"37":{"start":{"line":103,"column":12},"end":{"line":103,"column":134}},"38":{"start":{"line":107,"column":8},"end":{"line":107,"column":61}},"39":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"40":{"start":{"line":109,"column":12},"end":{"line":109,"column":143}},"41":{"start":{"line":112,"column":27},"end":{"line":112,"column":35}},"42":{"start":{"line":113,"column":29},"end":{"line":113,"column":50}},"43":{"start":{"line":114,"column":8},"end":{"line":114,"column":78}},"44":{"start":{"line":115,"column":8},"end":{"line":115,"column":117}},"45":{"start":{"line":118,"column":8},"end":{"line":118,"column":73}},"46":{"start":{"line":119,"column":8},"end":{"line":119,"column":114}},"47":{"start":{"line":123,"column":20},"end":{"line":126,"column":1}},"48":{"start":{"line":124,"column":4},"end":{"line":124,"column":39}},"49":{"start":{"line":125,"column":4},"end":{"line":125,"column":55}}},"fnMap":{"0":{"name":"isUserInServiceArea","decl":{"start":{"line":5,"column":22},"end":{"line":5,"column":41}},"loc":{"start":{"line":5,"column":60},"end":{"line":36,"column":1}},"line":5},"1":{"name":"fetchAvailableBikes","decl":{"start":{"line":37,"column":22},"end":{"line":37,"column":41}},"loc":{"start":{"line":37,"column":61},"end":{"line":58,"column":1}},"line":37},"2":{"name":"makeEntryInHistory","decl":{"start":{"line":60,"column":22},"end":{"line":60,"column":40}},"loc":{"start":{"line":60,"column":87},"end":{"line":74,"column":1}},"line":60},"3":{"name":"(anonymous_3)","decl":{"start":{"line":76,"column":28},"end":{"line":76,"column":29}},"loc":{"start":{"line":76,"column":48},"end":{"line":121,"column":1}},"line":76},"4":{"name":"(anonymous_4)","decl":{"start":{"line":123,"column":20},"end":{"line":123,"column":21}},"loc":{"start":{"line":123,"column":40},"end":{"line":126,"column":1}},"line":123}},"branchMap":{"0":{"loc":{"start":{"line":19,"column":4},"end":{"line":31,"column":5}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":31,"column":5}},{"start":{"line":25,"column":11},"end":{"line":31,"column":5}}],"line":19},"1":{"loc":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"type":"if","locations":[{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},{"start":{},"end":{}}],"line":80},"2":{"loc":{"start":{"line":80,"column":12},"end":{"line":80,"column":35}},"type":"binary-expr","locations":[{"start":{"line":80,"column":12},"end":{"line":80,"column":16}},{"start":{"line":80,"column":20},"end":{"line":80,"column":25}},{"start":{"line":80,"column":29},"end":{"line":80,"column":35}}],"line":80},"3":{"loc":{"start":{"line":86,"column":12},"end":{"line":88,"column":13}},"type":"if","locations":[{"start":{"line":86,"column":12},"end":{"line":88,"column":13}},{"start":{},"end":{}}],"line":86},"4":{"loc":{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},{"start":{},"end":{}}],"line":94},"5":{"loc":{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},"type":"if","locations":[{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},{"start":{},"end":{}}],"line":97},"6":{"loc":{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},{"start":{},"end":{}}],"line":102},"7":{"loc":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},{"start":{},"end":{}}],"line":108}},"s":{"0":7,"1":7,"2":7,"3":6,"4":2,"5":4,"6":1,"7":1,"8":5,"9":5,"10":4,"11":1,"12":1,"13":5,"14":5,"15":3,"16":2,"17":2,"18":2,"19":12,"20":12,"21":12,"22":2,"23":10,"24":10,"25":10,"26":2,"27":8,"28":8,"29":8,"30":8,"31":8,"32":2,"33":6,"34":2,"35":4,"36":4,"37":1,"38":3,"39":3,"40":0,"41":3,"42":3,"43":3,"44":3,"45":0,"46":0,"47":2,"48":2,"49":2},"f":{"0":7,"1":5,"2":5,"3":12,"4":2},"b":{"0":[2,4],"1":[2,10],"2":[12,12,10],"3":[2,8],"4":[2,6],"5":[2,4],"6":[1,3],"7":[0,3]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7033f088fccf1c974bf02906081f1c8e2fc5aa6e"},"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/db/connectDatabase.js":{"path":"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/db/connectDatabase.js","statementMap":{"0":{"start":{"line":4,"column":0},"end":{"line":4,"column":15}},"1":{"start":{"line":6,"column":13},"end":{"line":15,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1},"f":{},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1a4918254c2e4a70367781e4f5da476955decf2e"},"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/controllers/queryService.controller.js":{"path":"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/controllers/queryService.controller.js","statementMap":{"0":{"start":{"line":3,"column":21},"end":{"line":17,"column":1}},"1":{"start":{"line":4,"column":22},"end":{"line":4,"column":30}},"2":{"start":{"line":6,"column":4},"end":{"line":8,"column":5}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":84}},"4":{"start":{"line":10,"column":4},"end":{"line":16,"column":5}},"5":{"start":{"line":11,"column":31},"end":{"line":11,"column":56}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":64}},"7":{"start":{"line":14,"column":8},"end":{"line":14,"column":44}},"8":{"start":{"line":15,"column":8},"end":{"line":15,"column":85}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":21},"end":{"line":3,"column":22}},"loc":{"start":{"line":3,"column":41},"end":{"line":17,"column":1}},"line":3}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":4},"end":{"line":8,"column":5}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":8,"column":5}},{"start":{},"end":{}}],"line":6},"1":{"loc":{"start":{"line":6,"column":8},"end":{"line":6,"column":43}},"type":"binary-expr","locations":[{"start":{"line":6,"column":8},"end":{"line":6,"column":14}},{"start":{"line":6,"column":18},"end":{"line":6,"column":43}}],"line":6}},"s":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"f":{"0":0},"b":{"0":[0,0],"1":[0,0]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"fc9d96f9205a90c1c61ad6182e425edd71f9f49e"},"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/routes/db_connection.route.js":{"path":"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/routes/db_connection.route.js","statementMap":{"0":{"start":{"line":4,"column":15},"end":{"line":4,"column":23}},"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":36}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1},"f":{},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3a55ffc5266bdfa27b9d88eca321eca6077f54e6"},"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/routes/get_available_bikes.route.js":{"path":"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/routes/get_available_bikes.route.js","statementMap":{"0":{"start":{"line":5,"column":15},"end":{"line":5,"column":23}},"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":34}},"2":{"start":{"line":8,"column":0},"end":{"line":8,"column":57}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b70032372bd6819837aee3c483e77566301a72f6"},"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/app.js":{"path":"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/app.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":3,"column":15}},"1":{"start":{"line":10,"column":12},"end":{"line":10,"column":21}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":23}},"3":{"start":{"line":13,"column":0},"end":{"line":13,"column":47}},"4":{"start":{"line":14,"column":0},"end":{"line":14,"column":23}},"5":{"start":{"line":16,"column":0},"end":{"line":18,"column":2}},"6":{"start":{"line":17,"column":4},"end":{"line":17,"column":37}},"7":{"start":{"line":19,"column":0},"end":{"line":19,"column":29}},"8":{"start":{"line":20,"column":0},"end":{"line":20,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":13},"end":{"line":16,"column":14}},"loc":{"start":{"line":16,"column":27},"end":{"line":18,"column":1}},"line":16}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":1},"f":{"0":0},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b8fbb8526a9bd3445f669c5bf787f54a139840b1"}}}
