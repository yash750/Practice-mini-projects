window.jest_html_reporters_callback__({"numFailedTestSuites":2,"numFailedTests":5,"numPassedTestSuites":0,"numPassedTests":19,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":2,"numTotalTests":24,"startTime":1753422884014,"success":false,"testResults":[{"numFailingTests":4,"numPassingTests":12,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1753422884801,"loadTestEnvironmentEnd":1753422884066,"loadTestEnvironmentStart":1753422884027,"runtime":734,"setupAfterEnvEnd":1753422884173,"setupAfterEnvStart":1753422884173,"setupFilesEnd":1753422884067,"setupFilesStart":1753422884067,"slow":false,"start":1753422884067},"testFilePath":"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/controllers/get_available_bikes.controller.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mget_available_bikes.controller › get_available_bikes › should return appropriate message when user is not in service area\u001b[39m\u001b[22m\n\n    Property `isUserInServiceArea` does not exist in the provided object\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 203 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 204 |\u001b[39m       \u001b[90m// Mock isUserInServiceArea to return not in service area\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 205 |\u001b[39m       jest\u001b[33m.\u001b[39mspyOn(global\u001b[33m,\u001b[39m \u001b[32m'isUserInServiceArea'\u001b[39m)\u001b[33m.\u001b[39mmockImplementationOnce(() \u001b[33m=>\u001b[39m ({\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 206 |\u001b[39m         allow_ride\u001b[33m:\u001b[39m \u001b[36mfalse\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 207 |\u001b[39m         service_area_name\u001b[33m:\u001b[39m \u001b[32m''\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 208 |\u001b[39m         message\u001b[33m:\u001b[39m \u001b[32m'We are not serviceable in your area'\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ModuleMocker.spyOn (\u001b[22m\u001b[2mnode_modules/jest-mock/build/index.js\u001b[2m:593:13)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.spyOn (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/controllers/get_available_bikes.controller.test.js\u001b[39m\u001b[0m\u001b[2m:205:12)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mget_available_bikes.controller › get_available_bikes › should return appropriate message when no bikes are available\u001b[39m\u001b[22m\n\n    Property `isUserInServiceArea` does not exist in the provided object\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 223 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 224 |\u001b[39m       \u001b[90m// Mock isUserInServiceArea to return in service area\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 225 |\u001b[39m       jest\u001b[33m.\u001b[39mspyOn(global\u001b[33m,\u001b[39m \u001b[32m'isUserInServiceArea'\u001b[39m)\u001b[33m.\u001b[39mmockImplementationOnce(() \u001b[33m=>\u001b[39m ({\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 226 |\u001b[39m         allow_ride\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 227 |\u001b[39m         service_area_name\u001b[33m:\u001b[39m \u001b[32m'Test Area'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 228 |\u001b[39m         city_id\u001b[33m:\u001b[39m \u001b[35m1\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ModuleMocker.spyOn (\u001b[22m\u001b[2mnode_modules/jest-mock/build/index.js\u001b[2m:593:13)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.spyOn (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/controllers/get_available_bikes.controller.test.js\u001b[39m\u001b[0m\u001b[2m:225:12)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mget_available_bikes.controller › get_available_bikes › should return available bikes when all conditions are met\u001b[39m\u001b[22m\n\n    Property `isUserInServiceArea` does not exist in the provided object\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 258 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 259 |\u001b[39m       \u001b[90m// Mock helper functions\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 260 |\u001b[39m       jest\u001b[33m.\u001b[39mspyOn(global\u001b[33m,\u001b[39m \u001b[32m'isUserInServiceArea'\u001b[39m)\u001b[33m.\u001b[39mmockImplementationOnce(() \u001b[33m=>\u001b[39m mockServiceArea)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 261 |\u001b[39m       jest\u001b[33m.\u001b[39mspyOn(global\u001b[33m,\u001b[39m \u001b[32m'fetchAvailableBikes'\u001b[39m)\u001b[33m.\u001b[39mmockImplementationOnce(() \u001b[33m=>\u001b[39m mockBikes)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 262 |\u001b[39m       jest\u001b[33m.\u001b[39mspyOn(global\u001b[33m,\u001b[39m \u001b[32m'makeEntryInHistory'\u001b[39m)\u001b[33m.\u001b[39mmockImplementationOnce(() \u001b[33m=>\u001b[39m \u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 263 |\u001b[39m       \u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ModuleMocker.spyOn (\u001b[22m\u001b[2mnode_modules/jest-mock/build/index.js\u001b[2m:593:13)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.spyOn (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/controllers/get_available_bikes.controller.test.js\u001b[39m\u001b[0m\u001b[2m:260:12)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mget_available_bikes.controller › get_available_bikes › should handle errors gracefully\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32m500\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 277 |\u001b[39m       \u001b[36mawait\u001b[39m get_available_bikes(req\u001b[33m,\u001b[39m res)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 278 |\u001b[39m       \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 279 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[35m500\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 280 |\u001b[39m       expect(res\u001b[33m.\u001b[39mjson)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({ \u001b[22m\n\u001b[2m     \u001b[90m 281 |\u001b[39m         error\u001b[33m:\u001b[39m \u001b[32m'Error in get_available_bikes controller'\u001b[39m\u001b[33m,\u001b[39m \u001b[22m\n\u001b[2m     \u001b[90m 282 |\u001b[39m         message\u001b[33m:\u001b[39m \u001b[32m'Database error'\u001b[39m \u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveBeenCalledWith (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/controllers/get_available_bikes.controller.test.js\u001b[39m\u001b[0m\u001b[2m:279:26)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["get_available_bikes.controller","healthCheck"],"duration":7,"failureMessages":[],"fullName":"get_available_bikes.controller healthCheck should return a 200 status with success message","status":"passed","title":"should return a 200 status with success message"},{"ancestorTitles":["get_available_bikes.controller","isUserInServiceArea"],"duration":0,"failureMessages":[],"fullName":"get_available_bikes.controller isUserInServiceArea should return allow_ride true when user is in service area","status":"passed","title":"should return allow_ride true when user is in service area"},{"ancestorTitles":["get_available_bikes.controller","isUserInServiceArea"],"duration":0,"failureMessages":[],"fullName":"get_available_bikes.controller isUserInServiceArea should return allow_ride false when user is not in service area","status":"passed","title":"should return allow_ride false when user is not in service area"},{"ancestorTitles":["get_available_bikes.controller","isUserInServiceArea"],"duration":12,"failureMessages":[],"fullName":"get_available_bikes.controller isUserInServiceArea should handle database errors gracefully","status":"passed","title":"should handle database errors gracefully"},{"ancestorTitles":["get_available_bikes.controller","fetchAvailableBikes"],"duration":1,"failureMessages":[],"fullName":"get_available_bikes.controller fetchAvailableBikes should return available bikes in the service area","status":"passed","title":"should return available bikes in the service area"},{"ancestorTitles":["get_available_bikes.controller","fetchAvailableBikes"],"duration":1,"failureMessages":[],"fullName":"get_available_bikes.controller fetchAvailableBikes should throw error when database query fails","status":"passed","title":"should throw error when database query fails"},{"ancestorTitles":["get_available_bikes.controller","makeEntryInHistory"],"duration":1,"failureMessages":[],"fullName":"get_available_bikes.controller makeEntryInHistory should successfully log bike availability history","status":"passed","title":"should successfully log bike availability history"},{"ancestorTitles":["get_available_bikes.controller","makeEntryInHistory"],"duration":1,"failureMessages":[],"fullName":"get_available_bikes.controller makeEntryInHistory should return false when logging fails","status":"passed","title":"should return false when logging fails"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":1,"failureMessages":[],"fullName":"get_available_bikes.controller get_available_bikes should return 400 when required parameters are missing","status":"passed","title":"should return 400 when required parameters are missing"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":1,"failureMessages":[],"fullName":"get_available_bikes.controller get_available_bikes should return 401 when user is not found","status":"passed","title":"should return 401 when user is not found"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":1,"failureMessages":[],"fullName":"get_available_bikes.controller get_available_bikes should return appropriate message when user is blocked","status":"passed","title":"should return appropriate message when user is blocked"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":0,"failureMessages":[],"fullName":"get_available_bikes.controller get_available_bikes should return appropriate message when user balance is low","status":"passed","title":"should return appropriate message when user balance is low"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":1,"failureMessages":["Error: Property `isUserInServiceArea` does not exist in the provided object\n    at ModuleMocker.spyOn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-mock/build/index.js:593:13)\n    at Object.spyOn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/controllers/get_available_bikes.controller.test.js:205:12)\n    at Promise.finally.completed (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)\n    at _callCircusTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)\n    at _runTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:949:3)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:839:13)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:829:11)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:829:11)\n    at run (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:757:3)\n    at runAndTransformResultsToJestFormat (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)\n    at jestAdapter (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/runner.js:101:19)\n    at runTestInternal (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-runner/build/index.js:272:16)\n    at runTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-runner/build/index.js:340:7)"],"fullName":"get_available_bikes.controller get_available_bikes should return appropriate message when user is not in service area","status":"failed","title":"should return appropriate message when user is not in service area"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":1,"failureMessages":["Error: Property `isUserInServiceArea` does not exist in the provided object\n    at ModuleMocker.spyOn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-mock/build/index.js:593:13)\n    at Object.spyOn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/controllers/get_available_bikes.controller.test.js:225:12)\n    at Promise.finally.completed (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)\n    at _callCircusTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)\n    at _runTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:949:3)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:839:13)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:829:11)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:829:11)\n    at run (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:757:3)\n    at runAndTransformResultsToJestFormat (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)\n    at jestAdapter (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/runner.js:101:19)\n    at runTestInternal (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-runner/build/index.js:272:16)\n    at runTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-runner/build/index.js:340:7)"],"fullName":"get_available_bikes.controller get_available_bikes should return appropriate message when no bikes are available","status":"failed","title":"should return appropriate message when no bikes are available"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":0,"failureMessages":["Error: Property `isUserInServiceArea` does not exist in the provided object\n    at ModuleMocker.spyOn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-mock/build/index.js:593:13)\n    at Object.spyOn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/controllers/get_available_bikes.controller.test.js:260:12)\n    at Promise.finally.completed (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)\n    at _callCircusTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)\n    at _runTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:949:3)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:839:13)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:829:11)\n    at _runTestsForDescribeBlock (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:829:11)\n    at run (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:757:3)\n    at runAndTransformResultsToJestFormat (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)\n    at jestAdapter (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-circus/build/runner.js:101:19)\n    at runTestInternal (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-runner/build/index.js:272:16)\n    at runTest (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-runner/build/index.js:340:7)"],"fullName":"get_available_bikes.controller get_available_bikes should return available bikes when all conditions are met","status":"failed","title":"should return available bikes when all conditions are met"},{"ancestorTitles":["get_available_bikes.controller","get_available_bikes"],"duration":2,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m500\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.toHaveBeenCalledWith (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/controllers/get_available_bikes.controller.test.js:279:26)"],"fullName":"get_available_bikes.controller get_available_bikes should handle errors gracefully","status":"failed","title":"should handle errors gracefully"}]},{"numFailingTests":1,"numPassingTests":7,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1753422885343,"loadTestEnvironmentEnd":1753422884837,"loadTestEnvironmentStart":1753422884834,"runtime":506,"setupAfterEnvEnd":1753422884917,"setupAfterEnvStart":1753422884917,"setupFilesEnd":1753422884837,"setupFilesStart":1753422884837,"slow":false,"start":1753422884837},"testFilePath":"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/integration/get_available_bikes.integration.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mGet Available Bikes API Integration Tests › POST /api/bikes/get_available_bikes › should create history entry when bikes are found\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m, \u001b[22m\u001b[32mvalue\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected path: \u001b[32m\"latitude\"\u001b[39m\n\n    Expected value: \u001b[32m12.9716\u001b[39m\n    Received value: \u001b[31m\"12.97160000\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 148 |\u001b[39m           \u001b[36mconst\u001b[39m historyEntry \u001b[33m=\u001b[39m historyRows[\u001b[35m0\u001b[39m]\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 149 |\u001b[39m           expect(historyEntry)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'id'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 150 |\u001b[39m           expect(historyEntry)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'latitude'\u001b[39m\u001b[33m,\u001b[39m validUser\u001b[33m.\u001b[39mlat)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 151 |\u001b[39m           expect(historyEntry)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'longitude'\u001b[39m\u001b[33m,\u001b[39m validUser\u001b[33m.\u001b[39mlong)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 152 |\u001b[39m           expect(historyEntry)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'response'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 153 |\u001b[39m         }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveProperty (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/get_available_bikes.integration.test.js\u001b[39m\u001b[0m\u001b[2m:150:32)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["Get Available Bikes API Integration Tests","GET /api/bikes/health"],"duration":21,"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests GET /api/bikes/health should return 200 and success message","status":"passed","title":"should return 200 and success message"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":13,"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should return 400 when required parameters are missing","status":"passed","title":"should return 400 when required parameters are missing"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":38,"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should return 401 when user is not found","status":"passed","title":"should return 401 when user is not found"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":5,"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should return appropriate message for blocked user","status":"passed","title":"should return appropriate message for blocked user"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":4,"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should return appropriate message for user with low balance","status":"passed","title":"should return appropriate message for user with low balance"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":18,"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should return appropriate message for user outside service area","status":"passed","title":"should return appropriate message for user outside service area"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":14,"failureMessages":[],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should return bikes when all conditions are met","status":"passed","title":"should return bikes when all conditions are met"},{"ancestorTitles":["Get Available Bikes API Integration Tests","POST /api/bikes/get_available_bikes"],"duration":10,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m, \u001b[22m\u001b[32mvalue\u001b[39m\u001b[2m)\u001b[22m\n\nExpected path: \u001b[32m\"latitude\"\u001b[39m\n\nExpected value: \u001b[32m12.9716\u001b[39m\nReceived value: \u001b[31m\"12.97160000\"\u001b[39m\n    at Object.toHaveProperty (/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/tests/integration/get_available_bikes.integration.test.js:150:32)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Get Available Bikes API Integration Tests POST /api/bikes/get_available_bikes should create history entry when bikes are found","status":"failed","title":"should create history entry when bikes are found"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":true,"collectCoverageFrom":[],"coverageDirectory":"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/coverage","coverageProvider":"babel","coverageReporters":["json","lcov","clover"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":true,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":1,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"outputFile":"./html-report/jest-results.json","passWithNoTests":false,"projects":[],"reporters":[["default",{}],["/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/jest-html-reporters/index.js",{"publicPath":"./html-report","filename":"report.html"}]],"rootDir":"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride","runInBand":true,"runTestsByPath":false,"seed":1955568578,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPatterns":{"patterns":[],"type":"TestPathPatterns"},"testSequencer":"/Users/yeshwardhan/Desktop/Practice-mini-projects/yulu_ride/node_modules/@jest/test-sequencer/build/index.js","updateSnapshot":"new","useStderr":true,"waitForUnhandledRejections":false,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false,"coverageLinkPath":"../coverage/lcov-report/index.html"},"endTime":1753422885357,"_reporterOptions":{"publicPath":"./html-report","filename":"report.html","expand":false,"pageTitle":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})